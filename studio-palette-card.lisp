(setq *default-page-bounds* #(0 0 420 518))

(defun do-page (filename)
  (let* ((data (json:decode-json-from-source (make-pathname :name filename :type "json")))
         (page (cdr (assoc :page data)))
         (width (- (cdr (assoc :width page)) 30))   ;in mm
         (height (cdr (assoc :height page))) ;in mm
         (number-of-rows (cdr (assoc :rows page)))
         (number-of-cols (cdr (assoc :cols page)))
         (row-height (float (/ height number-of-rows)))
         (col-width (float (/ width number-of-cols)))
         (swatches (cdr (assoc :swatches data)))
         (helvetica (pdf:get-font "Helvetica")))
    (pdf:with-document ()
      (pdf:with-page ()
        (dotimes (row number-of-rows)
          (let ((swatch-row (nth row swatches)))
            (do* ((col 0 (1+ col))
                  (swatch (first swatch-row)
                          (nth col swatch-row)))
                 ((>= col number-of-cols))
              (setq col (+ col (do-swatch swatch row col row-height col-width)))))))
      (pdf:write-document (make-pathname :name filename :type "pdf")))))


(defun do-swatch (swatch row col row-height col-width)
  (let* ((x (* col col-width))
         (y (* row row-height))
         (top (1- (+ y row-height)))
         (helvetica (pdf:get-font "Helvetica"))
         (brand (if swatch (cdr (assoc :brand swatch)) ""))
         (name (if swatch (cdr (assoc :name swatch)) ""))
         (full-pan (and swatch
                        (or (cdr (assoc :full swatch))
                            nil)))
         (line1 name)
         (line2 ""))
    (when (and swatch
               (> (length name) 11))
      (do ((split-point (1- (length name)) (1- split-point)))
          ((or (equal split-point 0)
               (and (< split-point 14)
                    (equal (char name split-point) #\Space)))
           (unless (equal split-point 0)
             (setq line1 (subseq name 0 split-point)
                   line2 (subseq name (1+ split-point)))))))
    (pdf:rotate 0)
    (pdf:set-rgb-stroke 0.0 0.0 0.0)
    (pdf:set-rgb-fill 1.0 1.0 1.0)
    (pdf:rectangle x y (* col-width (if full-pan 2 1)) row-height)
    (pdf:close-fill-and-stroke)
    (pdf:in-text-mode
      (pdf:set-font helvetica 5.0)
      (pdf:set-rgb-stroke 0.0 0.0 0.0)
      (pdf:set-rgb-fill 0.0 0.0 0.0)
      (pdf:move-to (+ x 2) (- top 5))
      (pdf:draw-text (format nil "~A" brand))
      (pdf:move-to (+ x 2) (+ y 7))
      (pdf:draw-text (format nil "~A" line1))
      (pdf:move-to (+ x 2) (+ y 2))
      (pdf:draw-text (format nil "~A" line2)))
    (if full-pan 1 0)))
